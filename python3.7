import sys
import os

base_dir = os.path.dirname(__file__) or '/home/python'
print ('Base directory:', base_dir)

package_dir_a = os.path.join(base_dir, '.local/lib/python3.7/site-packages')
sys.path.insert(0, package_dir_a)


import websocket, json, pprint
import numpy
#Importing numpy could get rough. I did some nasty symlinks from python 3.6 to my python 3.7 to get it working
#This is mainly due to the fact that I set the lib to .local/lib/python3.7/site-packages previously to get 'websocket' to work. This caused a bug in numpy.
#REF: https://stackoverflow.com/questions/2915471/install-a-python-package-into-a-different-directory-using-pip

#Managed to fix: Env was loading Python 3.6 version instead of 3.7

import talib
#Main Error: ModuleNotFoundError: No module named 'talib._ta_lib'
#Further investigation showed that using symlink caused a bug in talib..welp "AttributeError: module 'numpy' has no attribute 'dtype'"..Back to square one.
#python3.7 bot.py 'talib works..finally..'


#Binance official documentation: https://github.com/binance-exchange/binance-official-api-docs
#Kline/Candlestick Streams

from binance.client import Client
from binance.enums import *

#import configparser
import config


#API_KEY = os.environ.get("API_KEY")
#API_SECRET = os.environ.get("API_SECRET")

#import config
#config.read('/home/python/binance/config.py')

SOCKET = "wss://stream.binance.com:9443/ws/shibusdt@kline_1m"

#Note to self: RSI Relative strenght Index (Used by traders. Mathematic calculation : 100 - 100/(1+RS) where RS: Relative Strength is given by AVG GAIN/AVG LOSS OF VALUE. PERIOD USED FOR AVG IS RSI_PERIOD
#Traders look at statistics all day long to get a sense of the RSI value but in Python these actions can be automated using the library "Talib and numpy"
RSI_PERIOD = 7
RSI_OVERBOUGHT = 68
#Bull Markets: In a bull market, the RSI ranges between an overbought zone of 80 to 90 and an oversold zone/support of 40 to 50.
RSI_OVERSOLD = 40
#Bear Markets: In a bear market, the RSI ranges between an oversold zone of 20 to 30 and an overbought zone/resistance of 55 to 65.

TRADE_SYMBOL = 'SHIBUSDT'
TRADE_QUANTITY = 20

#print('MAGIC - Jinku -  Shippu -  Senko -  Rennodan -  ZeroShiki')
#Final values of candle stick are needed. [x=true]. NB: Timestamp 't' changes when 'x' becomes true
#Please note that indentation is very important and if you copy from Windows use 'dos2unix' first on the file.

closes = []
in_position = True

client = Client(config.API_KEY, config.API_SECRET)

def order(side, quantity, symbol, order_type=ORDER_TYPE_MARKET):
    try:
        print("Creating order...")
        order = client.create_order(side=side, quantity=quantity, symbol=symbol, type=order_type)
        print(order)
    except Exception as e:
        print("An error occured -{}".format(e))
        return False

    return True


def on_open(ws):
    print('Connection Opened')
    print(client)

def on_close(ws):
    print('Connection Closed')

def on_message(ws, message):
    global closes, in_position

    json_message = json.loads(message)
    #pprint.pprint(json_message)


    candle = json_message['k']

    is_candle_closed = candle['x']
    close = candle['c']
    openc = candle['o']

    if is_candle_closed:
        print("candle closed at {}".format(close))
        closes.append(float(close))
        print("closes")
        print(closes)
    else:
        print("Candle is currently open at {}".format(close))

        if len(closes) > RSI_PERIOD:
            np_closes = numpy.array(closes)
            RSI = talib.RSI(np_closes, RSI_PERIOD)
            print("All RSI calculated so far")
            print(RSI)
            last_RSI = RSI[-1]
            print("The current RSI is {}".format(last_RSI))

        if last_RSI > RSI_OVERBOUGHT:
            if in_position:
                print("We are at an Overbought situation. [SELL]")
                    #Sell logic here
                order_completed = order(SIDE_SELL, TRADE_QUANTITY, TRADE_SYMBOL)
                if order_completed:
                    in_position = False
            else:
                print("Overbought but we do not have MATIC. Nothing to do at the moment...")

        if last_RSI < RSI_OVERSOLD:
            if in_position:
                print("Oversold but we already own MATIC. Nothing to do at the moment...")
            else:
                print("We are at an Oversold situation. [BUY NOW]")
                    #Buy logic here
                order_completed = order(SIDE_BUY, TRADE_QUANTITY, TRADE_SYMBOL)
                if order_completed:
                    in_position = True


#If we buy when MATIC is oversold. < RSI_OVERSOLD. If we get multiple Oversold situation the script will keep buying. Likewise when Overbought. (This is where the boolean in_position comes into play)


ws = websocket.WebSocketApp(SOCKET, on_open=on_open, on_close=on_close, on_message=on_message)
ws.run_forever()
